import logging
from datetime import datetime, date
from pprint import pprint
from sqlalchemy.exc import SQLAlchemyError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é
from typing import Any, Coroutine, Sequence, Union, Literal, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å, —Ä–∞—Å—à–∏—Ä—è—è –µ–≥–æ
from .extensions import BaseHandlerExtensions

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–∞–º–ø–∞ –¥–∞–Ω–Ω—ã—Ö
from ..utils.dump import DebugTools

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enums –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from ...enums.constants import BOX_TYPE_MAP

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –•—ç–ª–ø–µ—Ä –¥–ª—è –∞–ª—Ö–∏–º–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
from ...models.alchemy_helper import db_helper

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pydantic –º–æ–¥–µ–ª–∏
from ...schemas.task import TaskCreate, TaskRead
from ...schemas.user import UserRead, UserCreate
from ...schemas.warehouse import WarehouseRead
from app.schemas.general import ResponseModel, ResponseWarehouses, ResponseError, ResponseTasks

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º crud –º–æ–¥–µ–ª–∏ —Ü–µ–ª–∏–∫–æ–º
from ...models.crud import slots, hubs


#----------------------------------------#----------------------------------------#
class TaskService(BaseHandlerExtensions):
    def __init__(self):
        super().__init__()

    @staticmethod
    def sync_selected_warehouses(
            all_warehouses: list[dict[str, str | int]],
            selected_ids: list[int],
    ) -> list[dict[str, str | int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ `id`, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ `selected_ids`.

        ‚Ä¢ `all_warehouses` ‚Äì –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: [{'id': 218987, 'name': '–ê–ª–º–∞—Ç—ã'}, ‚Ä¶]
        ‚Ä¢ `selected_ids`   ‚Äì –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID: [218987, 324108]

        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ ¬´—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω¬ª:
        ‚Äì —Å–∫–ª–∞–¥—ã, id –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø–∞–ª–∏ –∏–∑ `selected_ids`, —É–¥–∞–ª—è—é—Ç—Å—è;
        ‚Äì –Ω–æ–≤—ã–µ id –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ).
        """
        # —Å–ª–æ–≤–∞—Ä—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ id ‚Üí –æ–±—ä–µ–∫—Ç —Å–∫–ª–∞–¥–∞
        ref = {w["id"]: w for w in all_warehouses}

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º ¬´—á–∏—Å—Ç—ã–π¬ª —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º id
        return [ref[w_id] for w_id in selected_ids if w_id in ref]

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def handle_create_task(
            user_id: int,
            page: int = None,
            lang_dict: dict[str, dict[str, str]] | None = None,
            session=None
    ) -> dict:
        offset = page * 10 if page else 0
        # self.page_size
        # self.box_types

        # list_tasks = self.get_tasks_max_coef(user_id, box_types, {'limit': limit, 'offset': offset})
        # if list_tasks['text']:
        #     text = self.lang_dict['existing_tasks_warning'].format(list_tasks=list_tasks['text'])
        #     return {**self.format_response(text, 'tasks_update_all'), "total": list_tasks['total']}

        # return self.format_response(self.lang_dict['existing_tasks_warning'], 'tasks_append')
        return {'text': 'success'}

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_warehouses_page(
            limit: int = 30,
            offset: int = 0,
            mode: str = None,
            session=None
    ) -> ResponseWarehouses | ResponseError:
        rows = await hubs.get_all_warehouses(session, offset, limit)
        total_whs = await hubs.count_warehouses(session)

        warehouses = [{"id": w.warehouse_id, "name": w.warehouse_name} for w in rows]

        return ResponseWarehouses(
            warehouses=warehouses,
            mode=mode,
            offset=offset,
            limit=limit,
            total=total_whs
        )


    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_user_uniq_task_with_names(
            user_id: int,
            limit: Optional[int] = None,
            offset: Optional[int] = 0,
            session=None
    ) -> ResponseTasks | ResponseError:
        # ‚îÄ‚îÄ 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Å–∫–ª–∞–¥–∞–º)
        uniq_task: Sequence[TaskRead] = await slots.get_tasks_unique_by_warehouse(session, user_id)

        # ‚îÄ‚îÄ 1.1. –í—ã—Ç—è–≥–∏–≤–∞–µ–º id —Å–∫–ª–∞–¥–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ uniq_task_alarm;
        uniq_task_alarm = [{"id": task.warehouse_id, "alarm": task.alarm} for task in uniq_task if task.warehouse_id is not None]

        # ‚îÄ‚îÄ 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        total = await slots.count_uniq_tasks_by_whs(session, user_id)

        # ‚îÄ‚îÄ 3. –û–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ (whs_list) –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–º–µ–Ω–∞ (whs_names)
        whs_list = [w["id"] for w in uniq_task_alarm]
        whs_names = await hubs.get_warehouses_name_map(session, whs_list)

        # ‚îÄ‚îÄ 4. –ü–µ—Ä–µ–¥–∞–µ–º –≤ –º–æ–¥–µ–ª—å ResponseTasks
        return ResponseTasks(tasks=list(uniq_task), offset=offset, limit=limit, total=total,
                                  warehouses_names_list=whs_names)

        # DebugTools.pretty_dump(uniq_task, style="rich", title="üì¶ Product Dump")
        # DebugTools.pretty_dump(uniq_task_alarm, style="rich", title="üì¶ Product Dump")

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_user_uniq_task_warehouse_ids(
            user_id: int,
            session=None
    ) -> ResponseTasks | ResponseError:
        warehouses_ids = await slots.get_tasks_unique_by_warehouse(session, user_id)
        return ResponseTasks(tasks=list(warehouses_ids), offset=0, limit=1, total=0)

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def create_bulk_tasks(
            user_id: int,
            warehouse_ids: list[int],
            box_types: list[str],
            max_coef: int,
            days_range: list[datetime],
            session=None
    ):
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Å–∫–ª–∞–¥, —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç."""
        for warehouse_id in warehouse_ids:
            for box_type_id in box_types:
                for coef in range(max_coef + 1):
                    for task_date in days_range:
                        task_data = TaskCreate(
                            user_id=user_id,
                            warehouse_id=warehouse_id,
                            box_type_id=BOX_TYPE_MAP[box_type_id],
                            coefficient=coef,
                            state="new",
                            alarm=1,
                            date=task_date
                        )
                        transaction = await slots.create_task(session,  task_data)



    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_all_unique_tasks(
            user_id: int,
            limit: int,
            offset: int = 0,
            session=None
    ) -> ResponseTasks | ResponseError:
        tasks = await slots.get_tasks_by_user_with_limit(session, user_id, limit, offset)
        tasks_serialized = [
            TaskRead.model_validate(task)
            for task in tasks
        ]
        total_whs_in_tasks = await slots.count_uniq_tasks_by_whs(session, user_id)

        return ResponseTasks(tasks=tasks_serialized, offset=offset, limit=limit, total=total_whs_in_tasks)

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_whs_by_ids(
            warehouses_ids: Sequence[int],
            session=None
    ) -> ResponseWarehouses | ResponseError:
        whs_by_ids = await hubs.get_warehouses_by_ids(session, warehouses_ids)
        warehouses: list[WarehouseRead] = [
            WarehouseRead.model_validate(wh) for wh in whs_by_ids
        ]
        return ResponseWarehouses(warehouses=warehouses, offset=0, limit=1, total=0)

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def get_wh_with_names(
            user_id: int,
            warehouses_ids: Sequence[int],
            session=None
    ) -> ResponseTasks | ResponseError:
        # ‚îÄ‚îÄ 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Å–∫–ª–∞–¥–∞–º)
        uniq_task: Sequence[TaskRead] = await slots.get_tasks_by_user_and_wh(session, user_id, list(warehouses_ids))
        # single_task = ()

        # ‚îÄ‚îÄ 1.1. –í—ã—Ç—è–≥–∏–≤–∞–µ–º id —Å–∫–ª–∞–¥–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ uniq_task_alarm;
        uniq_task_alarm = [{"id": task.warehouse_id, "alarm": task.alarm} for task in uniq_task if
                           task.warehouse_id is not None]

        # ‚îÄ‚îÄ 2. –û–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ (whs_list) –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–º–µ–Ω–∞ (whs_names)
        whs_list = [w["id"] for w in uniq_task_alarm]
        whs_names = await hubs.get_warehouses_name_map(session, whs_list)

        # ‚îÄ‚îÄ 3. –ü–µ—Ä–µ–¥–∞–µ–º –≤ –º–æ–¥–µ–ª—å ResponseTasks
        return ResponseTasks(tasks=list(uniq_task), offset=0, limit=1, total=0,
                             warehouses_names_list=whs_names)

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def toggle_alarm_for_wh(
            user_id: int,
            warehouse_id: int,
            state: Optional[Literal[0, 1]] = None,
            session=None
    ) -> Literal[True] | ResponseError:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
        ‚Ä¢ –µ—Å–ª–∏ `state` –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∫–ª–∞–¥—É;
        ‚Ä¢ –µ—Å–ª–∏ `state` –∑–∞–¥–∞–Ω ‚Äî –º–∞—Å—Å–æ–≤–æ –≤–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param warehouse_id: ID —Å–∫–ª–∞–¥–∞ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        :param state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (True / False), –µ—Å–ª–∏ –º–∞—Å—Å–æ–≤–æ
        :param session: –î–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä)
        :return: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ ‚Äî ResponseError
        """
        if state is None:
            # ‚îÄ‚îÄ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            toggle = await slots.toggle_alarm_state(session, user_id, warehouse_id)
            if toggle > 0:
                return True

            return ResponseError(
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏: warehouse_id={warehouse_id}, user_id={user_id}",
                code="FIND_ERROR"
            )

        # ‚îÄ‚îÄ –º–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        toggle = await slots.set_alarm_state_all(session, user_id, state)
        if toggle > 0:
            return True

        return ResponseError(
            message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: user_id={user_id}",
            code="FIND_ALL_ERROR"
        )

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def delete_all_tasks(
            user_id: int,
            session=None
    ) -> Literal[True] | ResponseError:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `tasks`.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param session: –î–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä)
        :return: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ ‚Äî ResponseError
        """
        trash = await slots.delete_tasks_by_user(session, user_id)
        if trash > 0:
            return True

        return ResponseError(
            message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: user_id={user_id}",
            code="FIND_ALL_ERROR"
        )

    @staticmethod
    @BaseHandlerExtensions.with_session_and_error_handling
    async def delete_single_tasks(
            user_id: int,
            wh_id: int,
            session=None
    ) -> bool | ResponseError:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `tasks`.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param wh_id: ID —Å–∫–ª–∞–¥–∞ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
        :param session: –î–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä)
        :return: True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ ‚Äî ResponseError
        """
        trash = await slots.delete_tasks_by_user_and_warehouse(session, user_id, wh_id)
        if trash > 0:
            return True

        return ResponseError(
            message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: user_id={user_id}",
            code="FIND_ALL_ERROR"
        )