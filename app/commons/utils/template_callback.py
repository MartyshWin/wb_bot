import logging
from typing import Union, Sequence, Iterable

from aiogram.exceptions import TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup

from app.keyboards.inline.general import InlineKeyboardHandler
from app.schemas.general import ResponseModel

# —Ç–∏–ø-–ø–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–±–æ –æ–¥–∏–Ω ResponseModel, –ª–∏–±–æ —Å–ø–∏—Å–æ–∫
ResponseLike = Union["ResponseModel", Sequence["ResponseModel"]]

# —Ç–∏–ø-–ø–æ–¥—Å–∫–∞–∑–∫–∞: –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π ¬´–ø—Å–µ–≤–¥–æ–Ω–∏–º¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ª–∏–±–æ –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
KBLike = Union[str, InlineKeyboardMarkup]

async def template_callback(
    cq: CallbackQuery,
    state: FSMContext,
    inline: InlineKeyboardHandler,
    *,
    responses: ResponseLike,
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    ‚Ä¢ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ResponseModel;
    ‚Ä¢ —É `ResponseModel.type_edit` –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
        - "message"  ‚Üí `edit_text()` (—Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞);
        - "keyboard" ‚Üí `edit_reply_markup()` (—Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞).
      –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "message".
    ‚Ä¢ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
      –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–º–∏.
    """
    try:
        # ‚îÄ‚îÄ 1. –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥ –¥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        resp_list: list[ResponseModel]
        if isinstance(responses, ResponseModel):
            resp_list = [responses] # –æ–¥–∏–Ω–æ—á–Ω—ã–π ResponseModel
        elif isinstance(responses, Iterable):
            resp_list = [r for r in responses if r is not None]
            if not all(isinstance(r, ResponseModel) for r in resp_list):
                raise TypeError("template_callback: –æ–∂–∏–¥–∞–ª—Å—è ResponseModel")
        else:
            raise TypeError(f"template_callback: unsupported type {type(responses)!r}")

        if not resp_list:  # –ø—É—Å—Ç–æ ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º
            logging.warning("‚ö†Ô∏è template_callback –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.")
            return

        # ‚îÄ‚îÄ 3. –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç ‚Üí edit_text ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        first = resp_list[0]
        kb = None
        if not first.kb is None:
            kb: InlineKeyboardMarkup | None = await resolve_kb(first.kb, inline)

        # ‚îÄ‚îÄ 3.1. –µ—Å–ª–∏ popup (first) ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if first.popup_text:
            # logging.info(f"üß® –û—Ç–ø—Ä–∞–≤–∫–∞ (first-popup)==")
            first_answer = await cq.answer(first.popup_text, show_alert=first.popup_alert)
        # -----------------------------

        if first.type_edit == "keyboard":  # —Ç–æ–ª—å–∫–æ –ø–æ–º–µ–Ω—è—Ç—å –ö–ë
            # logging.info(f"‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ (first-edit_reply_markup)==")
            await cq.message.edit_reply_markup(reply_markup=kb)
        elif first.type_edit == "message":  # –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            # logging.info(f"üí£ –û—Ç–ø—Ä–∞–≤–∫–∞ (fitst-edit_text)==")
            await cq.message.edit_text(first.text, reply_markup=kb)

        # ‚îÄ‚îÄ 4. –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Üí –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è -----------------------------
        for resp in resp_list[1:]:
            kb = None
            if not resp.kb is None:
                kb = await resolve_kb(resp.kb, inline)

            # ‚îÄ‚îÄ 4.1. –µ—Å–ª–∏ popup (other) ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if resp.popup_text:
                # logging.info(f"üß® –û—Ç–ø—Ä–∞–≤–∫–∞ (resp-popup)==")
                await cq.answer(resp.popup_text, show_alert=resp.popup_alert)

            if first.popup_text and not resp.popup_text:
                # logging.info(f"üí£ –û—Ç–ø—Ä–∞–≤–∫–∞ (edit_text -> resp)==")
                await cq.message.edit_text(resp.text, reply_markup=kb)

            # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ö–ë –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
            # –∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º type_edit
            if resp.type_edit == "keyboard":
                # logging.info(f"‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ (edit_reply_markup)==")
                await cq.message.edit_reply_markup(reply_markup=kb)
            elif first.type_edit == "message":  # –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                # logging.info(f"‚òÑÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ (answer)==")
                await cq.message.answer(resp.text, reply_markup=kb)
    except Exception as e:
        logging.error(f"template_callback error: {e}", exc_info=True)


async def parse_cq(cq: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ‚Ä¢ data       ‚Äì —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ callback-–¥–∞–Ω–Ω—ã—Ö (split("_"))
    ‚Ä¢ user_lang  ‚Äì —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 'unknown'
    """
    data = cq.data.split("_")
    user_lang = cq.from_user.language_code or "ru" # or "unknown"
    return data, user_lang

async def resolve_kb(kb_like: KBLike, inline: InlineKeyboardHandler) -> InlineKeyboardMarkup:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç ¬´—á—Ç–æ-—É–≥–æ–¥–Ω–æ-–ø–æ—Ö–æ–∂–µ–µ-–Ω–∞-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É¬ª –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
    `InlineKeyboardMarkup`.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ----------
    kb_like : str | InlineKeyboardMarkup
        ‚Ä¢ str ‚Äì –ø—Å–µ–≤–¥–æ–Ω–∏–º/–≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ `inline.get_keyboard`;
        ‚Ä¢ InlineKeyboardMarkup ‚Äì —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.

    –í–æ–∑–≤—Ä–∞—Ç
    -------
    InlineKeyboardMarkup
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        —Å–æ–æ–±—â–µ–Ω–∏—è.

    kb = await resolve_kb(some_keyboard)   # some_keyboard: str | InlineKeyboardMarkup
    await callback_query.message.edit_reply_markup(kb)
    """
    # —Å—Ç—Ä–æ–∫–∞ ‚Üí —Å—Ç—Ä–æ–∏–º –ø–æ —Ñ–∞–±—Ä–∏–∫–µ
    if isinstance(kb_like, str):
        return inline.get_keyboard(kb_like)

    # —É–∂–µ –≥–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Üí –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(kb_like, InlineKeyboardMarkup):
        return kb_like

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    raise TypeError(f"–ù–µ –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {kb_like!r} –∫ InlineKeyboardMarkup")