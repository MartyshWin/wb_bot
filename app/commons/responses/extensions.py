import json
import random
import string
import logging
from datetime import date
from typing import TypeVar, Hashable, Sequence, Iterable, Union, Any, Optional, Tuple, get_args

from app.schemas.general import ResponseModel

T = TypeVar("T", bound=Hashable)
# —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–º–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏: –ª–∏–±–æ –≥–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å, –ª–∏–±–æ ¬´–Ω–µ—á—Ç–æ¬ª,
# –∏–∑ —á–µ–≥–æ `format_response()` —Å–¥–µ–ª–∞–µ—Ç –º–æ–¥–µ–ª—å (str / dict / kwargs ...)
ResponseInput = Union[ResponseModel, str, dict[str, Any]]

class BaseHandlerExtensions:
    def __init__(self):
        self.lang: dict[str, dict[str, str]] = {}
        self.limit_whs_per_page: int = 30
        self.limit_whs_for_view: int = 10
        # text = self.lang.get("create_task_list", {}).get("space", "üîí no text")


    @staticmethod
    def format_response(
        text: str | dict[str, object],
        keyboard: Optional[object] = None,
        array_activity: bool = False,
        status: bool = True,
        popup_text: Optional[str] = None,
        popup_alert: Optional[bool] = None,
        type_edit: Optional[str] = None
    ) -> ResponseModel:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.

        :param text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param array_activity: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        :param status: –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param popup_text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        :param popup_alert: –°—Ç–∞—Ç—É—Å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞, True - —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        :param type_edit: –¢–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (message –∏–ª–∏ keyboard)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'status', 'text' –∏ 'kb'
        """
        return ResponseModel(
            status=status,
            text=text['response'] if array_activity else text,
            kb=text['keyboard'] if array_activity else (keyboard or None),
            popup_text=popup_text,
            popup_alert=popup_alert,
            type_edit=type_edit
        )

    @staticmethod
    def format_alert(
            status: bool = True,
            popup_text: Optional[str] = None,
            popup_alert: Optional[bool] = None,
    ) -> ResponseModel:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.

        :param text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :param array_activity: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        :param status: –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param popup_text: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
        :param popup_alert: –°—Ç–∞—Ç—É—Å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞, True - —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        :param type_edit: –¢–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (message –∏–ª–∏ keyboard)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'status', 'text' –∏ 'kb'
        """
        return ResponseModel(
            status=status,
            text='',
            kb=None,
            popup_text=popup_text,
            popup_alert=popup_alert,
        )

    def format_responses(
        self,
        *items: ResponseInput | Iterable[ResponseInput]
    ) -> list[ResponseModel]:
        """
        ¬´–ü–∞–∫–µ—Ç–Ω—ã–π¬ª —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä.

        ‚Ä¢ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
          - –≥–æ—Ç–æ–≤—ã–µ `ResponseModel`;
          - str / dict (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥–∞–ª—å—à–µ –≤ `format_response`);
          - –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ;
        ‚Ä¢ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `list[ResponseModel]`, —Ñ–∏–ª—å—Ç—Ä—É—è `None`.
        """
        out: list[ResponseModel] = []

        for item in items:
            # --- –∫–æ–ª–ª–µ–∫—Ü–∏—è (list / tuple / set ‚Ä¶) --------------------------
            if isinstance(item, Iterable) and not isinstance(item, (str, bytes, ResponseModel)):
                out.extend(self.format_responses(*item))          # —Ä–µ–∫—É—Ä—Å–∏—è
                continue

            # --- —É–∂–µ –≥–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å ---------------------------------------
            if isinstance(item, ResponseModel):
                out.append(item)
                continue

            # --- ¬´—Å—ã—Ä—ã–µ¬ª –¥–∞–Ω–Ω—ã–µ ‚Üí —Å–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ format_response ----
            try:
                model = format_response(text=item)           # type: ignore[arg-type]
            except Exception as e:
                raise TypeError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è format_responses: {type(item)!r}") from e

            out.append(model)

        # —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None (–µ—Å–ª–∏ format_response –≤–µ—Ä–Ω—ë—Ç None)
        return [m for m in out if m is not None]

    @staticmethod
    def safe_get(
            seq: Sequence[T],
            index: int,
            default: T | None = None,
    ) -> T | None:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç `seq[index]`, –Ω–µ –ø–æ–¥–Ω–∏–º–∞—è `IndexError`.

        data = ["zero", "one", "two"]
        element = safe_get(data, 1)                 # ‚Üí "one"
        element = safe_get(data, 10)                # ‚Üí None
        element = safe_get(data, 10, default="-")   # ‚Üí "-"
        element = safe_get(data, -1)                # ‚Üí "two"

        letters = ("a", "b", "c")
        element = safe_get(letters, 0)              # ‚Üí "a"

        ‚Ä¢ seq     ‚Äì –ª—é–±–æ–π –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (`list`, `tuple`, `str`, ‚Ä¶)
        ‚Ä¢ index   ‚Äì —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        ‚Ä¢ default ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        """
        return seq[index] if -len(seq) <= index < len(seq) else default

    @staticmethod
    def validate_ymd(year: int, month: int, day: int) -> date:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ `year-month-day` –æ–±—Ä–∞–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—É—é –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é –¥–∞—Ç—É.

        ‚Ä¢ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `datetime.date`;
        ‚Ä¢ –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –±—Ä–æ—Å–∞–µ—Ç `ValueError`, –≥–¥–µ —É–∂–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞
          (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´day is out of range for month¬ª).
        """
        try:
            return date(year, month, day)
        except ValueError as exc:  # 31 —Ñ–µ–≤, 30 —Ñ–µ–≤ ‚Ä¶ ‚Üê —Å—é–¥–∞
            raise ValueError(
                f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: {year:04d}-{month:02d}-{day:02d}"
            ) from exc


    @staticmethod
    def get_or_default(value: Any, expected_type: Union[type, Tuple[type, ...]], default: T) -> T:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤.
        –ï—Å–ª–∏ —É–¥–∞—ë—Ç—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ ‚Äî default.

        :param value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
        :param expected_type: –¢–∏–ø –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂ —Ç–∏–ø–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, int, (int, float)).
        :param default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.
        :return: –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ default.
        """
        if not isinstance(expected_type, tuple):
            expected_type = (expected_type,)

        for typ in expected_type:
            try:
                casted = typ(value)
                if isinstance(casted, typ):
                    return casted
            except (ValueError, TypeError):
                continue

        return default