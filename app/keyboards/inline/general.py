import re
from typing import Union, Callable, List, Any, TypedDict

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import calendar
from datetime import datetime

# –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class InlineKeyboardHandler:
    def __init__(self):

        self.start_kb: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "callback_data": "create_task"}],
            [{"text": "üóÇ –ú–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "callback_data": "my_tasks"}],
            [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "callback_data": "alarm_setting"}],
            [{"text": "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "callback_data": "choose_tariff"}],
            [{"text": "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "callback_data": "select_diapason"}],
        ])

        self.task_mode_keyboard: InlineKeyboardMarkup = self.build_inline_keyboard([
            [
                {"text": "üõ†Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á", "callback_data": "task_mode_mass"},
                {"text": "üîß –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á", "callback_data": "task_mode_flex"}
            ],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}],
        ])
        self.tasks_update_all: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "‚ôªÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", "callback_data": "task_delete_confirm"}],
            [{"text": "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫ —Å–ø–∏—Å–∫—É", "callback_data": "tasks_append"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "main"}],
        ])

        self.delete_confirm: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "–î–∞", "callback_data": "tasks_update_all"}],
            [{"text": "–û—Ç–º–µ–Ω–∞", "callback_data": "main"}],
        ])

        self.search_slot_mass: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callback_data": "task_save"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}],
        ])

        self.search_slot_flex: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callback_data": "task_save"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}],
        ])

        self.subscribe: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "choose_tariff"}],
            [{"text": "üÜì –ü–æ–ª—É—á–∏—Ç—å 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞", "callback_data": "free_sub"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}],
        ])

        self.bot_add: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üö´ –û—Ç–º–µ–Ω–∞", "callback_data": "alarm_setting"}],
        ])

        self.choose_tariff: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üíº –¢–∞—Ä–∏—Ñ \"–°–¢–ê–†–¢\" (590 —Ä—É–±.)", "callback_data": "tarif_1"}],
            [{"text": "üöÄ –¢–∞—Ä–∏—Ñ \"–ü–†–û–§–ò\" (790 —Ä—É–±.)", "callback_data": "tarif_2"}],
            [{"text": "üëë –¢–∞—Ä–∏—Ñ \"–ú–ê–ö–°–ò\" (1390 —Ä—É–±.)", "callback_data": "tarif_3"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "choose_tariff"}],
        ])

        self.choose_tariff_with_free: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üíº –¢–∞—Ä–∏—Ñ \"–°–¢–ê–†–¢\" (590 —Ä—É–±.)", "callback_data": "tarif_1"}],
            [{"text": "üöÄ –¢–∞—Ä–∏—Ñ \"–ü–†–û–§–ò\" (790 —Ä—É–±.)", "callback_data": "tarif_2"}],
            [{"text": "üëë –¢–∞—Ä–∏—Ñ \"–ú–ê–ö–°–ò\" (1390 —Ä—É–±.)", "callback_data": "tarif_3"}],
            [{"text": "üÜì –ü–æ–ª—É—á–∏—Ç—å 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞", "callback_data": "free_sub"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "choose_tariff"}],
        ])

        self.my_tasks: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏", "callback_data": "create_task"}],
            [{"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏", "callback_data": "task_update"}],
            [{"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", "callback_data": "task_delete_confirm"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "main"}],
        ])

        self.alarm_setting: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "callback_data": "bot_add"}],
            [{"text": "‚≠ê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º", "callback_data": "alarm_edit"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "main"}],
        ])

        self.my_tasks_empty: InlineKeyboardMarkup = self.build_inline_keyboard([
            [{"text": "üìù –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "callback_data": "create_task"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main"}],
        ])

        # self.select_date: InlineKeyboardMarkup = self.create_select_date()


    @staticmethod
    # –°–æ–∑–¥–∞—Ç—å enums –º–æ–¥–µ–ª—å –¥–ª—è method, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è fast –∏–ª–∏ full
    def get_continue_kb(method: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º callback_data.

        :param method: –ú–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "fast" –∏–ª–∏ "full".
                      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
                 - "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", —Å–æ–¥–µ—Ä–∂–∞—â–∞—è callback_data –≤–∏–¥–∞ "continue_setup:<method>"
                 - "–ù–∞–∑–∞–¥", –≤–µ–¥—É—â–∞—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å callback_data "home"
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_setup:{method}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="home")],
            ]
        )


    def get_keyboard(self, attribute_name: str | object) -> str | None | Any:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–æ–¥ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã.

        :param attribute_name: –ò–º—è –º–µ—Ç–æ–¥–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'method_name(arg1, arg2)'.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–æ–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        if attribute_name is not None:
            if '(' in attribute_name and attribute_name.endswith(')'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–µ—Ç–æ–¥–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                match = re.match(r"(\w+)\((.*)\)", attribute_name)
                if not match:
                    return "Invalid format"

                method_name, args_str = match.groups()

                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –ø–æ –∏–º–µ–Ω–∏
                method = getattr(self, method_name, None)
                if not method or not callable(method):
                    return "Not Found keyboard"

                # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                args: List[str] = [arg.strip() for arg in args_str.split(',')] if args_str else []

                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                return method(*args)
            else:
                # –ï—Å–ª–∏ —Å–∫–æ–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                return getattr(self, attribute_name, "Not Found keyboard")

    @staticmethod
    def build_inline_keyboard(
            rows: list[list[dict[str, str | bool | dict | None]]]
    ) -> InlineKeyboardMarkup:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ (—Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ text –∏ callback_data/url/...).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π.
        """
        inline_keyboard = []

        for row in rows:
            button_row = []

            for btn in row:
                text = btn.get("text")
                if not text:
                    raise ValueError("–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'text'.")

                action_keys = (
                    "callback_data",
                    "url",
                    "switch_inline_query",
                    "switch_inline_query_current_chat",
                    "callback_game",
                    "pay",
                )

                button_kwargs = {
                    key: btn[key] for key in action_keys if key in btn and btn[key] is not None
                }

                if not button_kwargs:
                    raise ValueError(f"–ö–Ω–æ–ø–∫–∞ '{text}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è.")

                button = InlineKeyboardButton(text=text, **button_kwargs)
                button_row.append(button)

            inline_keyboard.append(button_row)

        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    # „Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞
    #   ‚ñ∫ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # „Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞
    @staticmethod
    # create_invoice() -> create_billing()
    def create_billing(self, link_pay: str, payment_id: str) -> InlineKeyboardMarkup:
        return self.build_inline_keyboard([
            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "url": link_pay}],
            [{"text": "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", "callback_data": "check_pay_" + payment_id}],
            [{"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", "callback_data": "canceled_payment_" + payment_id}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "choose_tariff"}],
        ])

    @staticmethod
    def cancel_subscription(self, payment_id: str) -> InlineKeyboardMarkup:
        return self.build_inline_keyboard([
            [{"text": "‚õîÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "cancel_subscription_" + payment_id}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "choose_tariff"}],
        ])

    @staticmethod
    def verify_invoice(self, payment_id: str) -> InlineKeyboardMarkup:
        return self.build_inline_keyboard([
            [{"text": "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", "callback_data": "check_pay_" + payment_id}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "choose_tariff"}],
        ])

    @staticmethod
    def save_params(self, payment_id: str) -> InlineKeyboardMarkup:
        return self.build_inline_keyboard([
            [{"text": "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "callback_data": "task_save"}],
            [{"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": "select_diapason_back"}],
        ])
    # „Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞
    #   ‚ñ∫ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # „Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞
    def box_type(
            self,
            dictionary: dict[int, ...] | None = None,
            back: bool = False,
            warehouse_id: int = 0,
            page: int = 0,
            box_default: list[int] = [],
            mode: str = ''
    ) -> InlineKeyboardMarkup:
        checked = {5: 'üü¢ ', 6: 'üü¢ ', 2: 'üü¢ '} if dictionary else {}
        confirm = (
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ‚úÖ", callback_data="confirm_box_type")]
            if dictionary and box_default != dictionary else []
        )
        back_cb: str = (
            f"task_update_select_{warehouse_id}_{page}"
            if back else f"task_mode_{mode}"
        )

        return self.build_inline_keyboard([
            [{
                "text": f"{checked.get(5, '')}–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã",
                "callback_data": f"box_type_mono_{warehouse_id}_{page}"
            }],
            [{
                "text": f"{checked.get(6, '')}–°—É–ø–µ—Ä—Å–µ–π—Ñ",
                "callback_data": f"box_type_safe_{warehouse_id}_{page}"
            }],
            [{
                "text": f"{checked.get(2, '')}–ö–æ—Ä–æ–±–∞",
                "callback_data": f"box_type_pan_{warehouse_id}_{page}"
            }],
            confirm,
            [{
                "text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è",
                "callback_data": back_cb
            }],
        ])

    @staticmethod
    def coefs(
            self,
            coef: dict[int, int] | None = None,
            back: bool = False,
            warehouse_id: int = 0,
            page: int = 0,
            coef_default: str = ''
    ) -> InlineKeyboardMarkup:
        coef = coef or {}
        coef_map: dict[str, str] = {
            f"coefs_{i}": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ" if i == 0 else f"–ö–æ—ç—Ñ. –¥–æ —Ö{i}" for i in range(21)
        }

        selected = next((key for key, i in zip(coef_map, range(21)) if i in coef), '')

        buttons: list[list[InlineKeyboardButton]] = []
        row: list[InlineKeyboardButton] = []

        for key, label in coef_map.items():
            text = f"{'üü¢ ' if key == selected else ''}{label}"
            row.append(InlineKeyboardButton(text=text, callback_data=key))
            if len(row) == 3:
                buttons.append(row)
                row = []

        if row:
            buttons.append(row)

        if coef and (selected or str(next(iter(coef), '')) != coef_default):
            buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ‚úÖ", callback_data="confirm_coef")])

        back_data = f"task_update_select_{warehouse_id}_{page}" if back else "confirm_selection"
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data=back_data)])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_warehouse_list(
            self,
            warehouses: list[dict[str, int | str]],
            mode: str,
            selected_warehouses: list[int],
            selected_list: list[int],
            page: int,
            total_pages: int
    ) -> InlineKeyboardMarkup:
        buttons: list[list[InlineKeyboardButton]] = []
        row: list[InlineKeyboardButton] = []

        for warehouse in warehouses:
            name = str(warehouse["name"])
            wid = warehouse["id"]
            if wid in selected_warehouses or wid in selected_list:
                name = f"üü¢ {name}"

            row.append(InlineKeyboardButton(text=name, callback_data=f"select_warehouse_{mode}_{wid}"))
            if len(row) == 2:
                buttons.append(row)
                row = []

        if row:
            buttons.append(row)

        pagination: list[InlineKeyboardButton] = []
        if page > 0:
            pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"warehouse_page_{mode}_{page - 1}"))
        if page < total_pages - 1:
            pagination.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"warehouse_page_{mode}_{page + 1}"))
        if pagination:
            buttons.append(pagination)

        if selected_warehouses:
            buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ‚úÖ", callback_data="confirm_selection")])

        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="tasks_append")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_alarm_list(
            self,
            warehouses: list[dict[str, int | str]],
            alarm_status: dict[int, bool],
            page: int,
            total_pages: int
    ) -> InlineKeyboardMarkup:
        buttons: list[list[InlineKeyboardButton]] = []
        row: list[InlineKeyboardButton] = []

        for warehouse in warehouses:
            wid = warehouse["id"]
            name = f"{'üîî' if alarm_status.get(wid) else 'üîï'} {warehouse['name']}"
            row.append(InlineKeyboardButton(text=name, callback_data=f"toggle_alarm_{wid}_{page}"))

            if len(row) == 2:
                buttons.append(row)
                row = []

        if row:
            buttons.append(row)

        pagination: list[InlineKeyboardButton] = []
        if page > 0:
            pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"alarm_page_{page - 1}"))
        if page < total_pages - 1:
            pagination.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"alarm_page_{page + 1}"))
        if pagination:
            buttons.append(pagination)

        if warehouses:
            buttons.append([
                InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö", callback_data="alarm_all_on")
            ])
            buttons.append([
                InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö", callback_data="alarm_all_off")
            ])

        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="alarm_setting")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_task_list(
            self,
            warehouses: list[dict[str, int | str]],
            alarm_status: dict[int, bool],
            page: int,
            total_pages: int
    ) -> InlineKeyboardMarkup:
        buttons: list[list[InlineKeyboardButton]] = []
        row: list[InlineKeyboardButton] = []

        for warehouse in warehouses:
            wid = warehouse["id"]
            name = str(warehouse["name"])  # –ó–Ω–∞—á–µ–Ω–∏–µ alarm –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–º—è
            row.append(InlineKeyboardButton(text=name, callback_data=f"task_update_select_{wid}_{page}"))

            if len(row) == 2:
                buttons.append(row)
                row = []

        if row:
            buttons.append(row)

        pagination: list[InlineKeyboardButton] = []
        if page > 0:
            pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"task_update_page_{page - 1}"))
        if page < total_pages - 1:
            pagination.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"task_update_page_{page + 1}"))
        if pagination:
            buttons.append(pagination)

        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="my_tasks")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)


    def edit_task_warehouse(
            self,
            warehouse_id: int,
            page: int
    ) -> InlineKeyboardMarkup:
         return self.build_inline_keyboard([
            [{
                "text": "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏",
                "callback_data": f"task_update_box_{warehouse_id}_{page}"
            }],
            [{
                "text": "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç",
                "callback_data": f"task_update_coef_{warehouse_id}_{page}"
            }],
            [{
                "text": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥",
                "callback_data": f"task_update_date_{warehouse_id}_{page}"
            }],
            [{
                "text": "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                "callback_data": f"task_delete_{warehouse_id}_{page}"
            }],
            [{
                "text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è",
                "callback_data": f"task_update_page_{page}"
            }],
        ])

    @staticmethod
    def generate_calendar(
            self,
            selected_year: int | None = None,
            selected_month: int | None = None,
            selected_day: int | None = None,
            status_end: bool = False
    ) -> InlineKeyboardMarkup:
        if selected_year is None:
            selected_year = datetime.now().year
        if selected_month is None:
            selected_month = datetime.now().month

        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤:
        month_names: list[str] = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
                       "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
        days_of_week: list[str] = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        month_name: str = month_names[selected_month - 1]

        inline_keyboard: list[list[InlineKeyboardButton]] = [
            [# –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ú–µ—Å—è—Ü –ì–æ–¥)
                InlineKeyboardButton(text=f"[{month_name} {selected_year}]", callback_data="ignore")
            ],
            [  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
                InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week
            ]
        ]

        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
        month_calendar = calendar.monthcalendar(selected_year, selected_month)
        for week in month_calendar:
            row = []
            for day in week:
                if day == 0:
                    row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
                else:
                    if day == datetime.now().day and selected_month == datetime.now().month and selected_year == datetime.now().year:
                        row.append(
                            InlineKeyboardButton(
                                text=f"‚ùó{str(day)}‚ùóÔ∏è",
                                callback_data=f"select_day_{selected_year}_{selected_month}_{day}"
                            )
                        )
                    else:
                        row.append(
                            InlineKeyboardButton(
                                text=str(day),
                                callback_data=f"select_day_{selected_year}_{selected_month}_{day}"
                            )
                        )
            inline_keyboard.append(row)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        prev_month = selected_month - 1 if selected_month > 1 else 12
        next_month = selected_month + 1 if selected_month < 12 else 1
        prev_year = selected_year if selected_month > 1 else selected_year - 1
        next_year = selected_year if selected_month < 12 else selected_year + 1

        # –ù–∏–∂–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –Ω–∞–∑–∞–¥ –ø–æ –º–µ—Å—è—Ü—É, —Å–µ–≥–æ–¥–Ω—è, –≤–ø–µ—Ä—ë–¥ –ø–æ –º–µ—Å—è—Ü—É
        inline_keyboard.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data=f"change_month_{prev_year}_{prev_month}"
            ),
            InlineKeyboardButton(
                text="–°–µ–≥–æ–¥–Ω—è",
                callback_data=f"select_day_{datetime.now().year}_{datetime.now().month}_{datetime.now().day}"
            ),
            InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data=f"change_month_{next_year}_{next_month}"
            )
        ])

        if status_end:
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä"
            inline_keyboard.append([
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ‚úÖ", callback_data="confirm_date")
            ])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        inline_keyboard.append([
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="confirm_coef")
        ])

        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    def create_select_date(
            self,
            back: bool = False,
            warehouse_id: int = 0,
            page: int = 0
    ) -> InlineKeyboardMarkup:
        back_cb: str = (
            f"task_update_select_{warehouse_id}_{page}"
            if back else "confirm_box_type"
        )

        return self.build_inline_keyboard([
            [
                {"text": "–°–µ–≥–æ–¥–Ω—è", "callback_data": "select_date_today"},
                {"text": "–ó–∞–≤—Ç—Ä–∞", "callback_data": "select_date_tomorrow"},
            ],
            [
                {"text": "–ù–µ–¥–µ–ª—è", "callback_data": "select_date_week"},
                {"text": "–ú–µ—Å—è—Ü", "callback_data": "select_date_month"},
            ],
            [{"text": "–í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ", "callback_data": "select_diapason"}],
            [
                {"text": "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", "callback_data": back_cb},
            ],
        ])

    @staticmethod
    def generate_pagination_keyboard(
            self,
            current_page: int,
            total_tasks: int,
            page_size: int = 5,
            callback_data: str = "paginate_",
            base_keyboard: InlineKeyboardMarkup | None = None
    ) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.

        :param self:
        :param current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
        :param total_tasks: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á.
        :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        :param callback_data: –ü—Ä–µ—Ñ–∏–∫—Å callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫.
        :param base_keyboard: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (InlineKeyboardMarkup) –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        """
        # total_pages = ((total_tasks - 1) // page_size + 1) - 1
        total_pages: int = (total_tasks - 1) // page_size

        buttons: list[InlineKeyboardButton] = [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{callback_data}{current_page - 1}")
            if current_page > 0 else None,
            InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"{callback_data}{current_page + 1}")
            if current_page < total_pages else None
        ]
        buttons = [btn for btn in buttons if btn]

        if not base_keyboard:
            base_keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        else:
            base_keyboard.inline_keyboard = [
                row for row in base_keyboard.inline_keyboard
                if all(btn.text not in {"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è"} for btn in row)
            ]

        if buttons:
            base_keyboard.inline_keyboard.insert(0, buttons)

        return base_keyboard